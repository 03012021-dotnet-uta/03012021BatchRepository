# a pipeline is a set of stuff that will run to implement continuous integration
#    build, test, anything it can do to automatically check the quality of the code.
#   and, maybe also package/publish it, maybe even deploy it to some server or cloud environment like Azure App Service


# every pipeline has a set of conditions deciding when it will activate.
# here we configure: it will run on every push to main branch specifically.
# but only if this solution's folder was modified in the push.
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - 4-devops/EmailApp

# set requirements for the build agent that will run the stuff
# here: ubuntu (latest version) virtual machine
pool:
  vmImage: ubuntu-latest

# set variables, referenced with $() syntax
variables:
  buildConfiguration: 'Release'

# the steps to follow. here we have one script step, a command run in bash
# starting from the root folder of the repository.
steps:
- task: UseDotNet@2
  displayName: dotnet sdk
  inputs:
    packageType: 'sdk'
    version: '5.0.x'

- task: UseDotNet@2
  inputs:
    packageType: 'runtime'
    version: '2.x'

- task: SonarCloudPrepare@1
  displayName: sonar prepare analysis
  inputs:
    SonarCloud: 'sonarcloud-escalonn'
    organization: '2102-feb08-net'
    scannerMode: 'MSBuild'
    projectKey: '2102-feb08-net_trainer-code'
    projectName: 'EmailApp'
    extraProperties: 'sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*/coverage.opencover.xml'

- script: dotnet build --configuration $(buildConfiguration)
  displayName: dotnet build
  workingDirectory: 4-devops/EmailApp

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --collect "xplat code coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover'
    workingDirectory: '4-devops/EmailApp'

- task: SonarCloudAnalyze@1
  displayName: sonar run analysis

- task: SonarCloudPublish@1
  displayName: publish sonar quality gate
  inputs:
    pollingTimeoutSec: '300'

- task: PublishCodeCoverageResults@1
  displayName: publish code coverage report
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: dotnet publish
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '4-devops/EmailApp/EmailApp.WebUI'
    zipAfterPublish: true

- task: AzureRmWebAppDeployment@4
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  displayName: app service deploy
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Training(0c61e2ed-4a6a-437f-9a03-1f223527220b)'
    appType: 'webApp'
    WebAppName: '2102-escalona-email'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
